#include<iostream>
#include<stack>
#include<string>
#include<stdlib.h>
using namespace std;
string action[12][6]={"S5","0","0","S4","0","0",            //ACTION表
                      "0","S6","0","0","0","acc",
					  "0","r2","S7","0","r2","r2",
					  "0","r4","r4","0","r4","r4",
					  "S5","0","0","S4","0","0",
					  "0","r6","r6","0","r6","r6",
					  "S5","0","0","S4","0","0",
					  "S5","0","0","S4","0","0",
					  "0","S6","0","0","S11","0",
					  "0","r1","S7","0","r1","r1",
                      "0","r3","r3","0","r3","r3",
					  "0","r5","r5","0","r5","r5"};
int gotoarr[12][3]={1,2,3,                         //GOTO表
                  0,0,0,
				  0,0,0,
				  0,0,0,
				  8,2,3,
				  0,0,0,
				  0,9,3,
				  0,0,10,
				  0,0,0,
				  0,0,0,
				  0,0,0,
				  0,0,0};
char vt[6]={'i','+','*','(',')','#'};     //存放终结符
char vn[3]={'E','T','F'};                 //存放非终结符
string Production[6]={"E->E+T","E->T","T->T*F","T->F","F->(E)","F->i"};//产生式集合
int count=0;//记录当前进行处理的输入字符串字符位置
int line=1;//记录处理的步骤数
bool flag=false;
int StatusNumber=1;//栈中状态数
string stacktd="#";//记录符号栈中内容
int Status[50]={0};//记录状态栈
stack <char> Stack;//创建一个符号栈
stack <int> status;//创建一个状态栈
void Judge(int &i,int j,char arr[],char ch,string s){//判断输入串是否由文法终结符组成
	flag=false;
	for(int l=0;l<j;l++){
			if(ch==arr[l]){
			flag=true;
			i=l;
			break;
			}
	}
	if(flag==false){
		cout<<"\tError"<<endl;
		count=s.size();
	}
}
void Outputstatus(){//输出状态集
	for(int i=0;i<StatusNumber;i++)
		cout<<Status[i];
}
void Outputstring(string s){//输出未处理的字符串
	for(int i=count;i<s.size();i++)
		cout<<s.at(i);
}
void Output(string s){//输出步骤、状态集、符号集、输入串
  cout<<line<<"\t";
  Outputstatus();
  cout<<"\t"<<stacktd<<"\t";
  Outputstring(s);
  cout<<"\t\t";
  line++;
}
void Shift(int i,string s){//移进函数S
	Output(s);
    cout<<"ACTION["<<status.top()<<","<<s.at(count)<<"]=S"<<i<<",状态"<<i<<"入栈"<<endl;
    status.push(i);//将状态i压进状态栈
    Status[StatusNumber]=i;//Status记录状态栈的内容
    Stack.push(s.at(count));//将当前面临的输入串符号压进符号栈
    stacktd=stacktd+s.at(count);//stacktd记录符号栈的内容
    count++;//当前面临的输入串字符往后移一位
	StatusNumber++;//状态数加一
}
void Goto(stack <int> st1,stack <char> st2,string s){//GoTo语句
	int j=-1;
    int ch1=st1.top();
	char ch2=st2.top();
	Judge(j,3,vn,ch2,s);//求得ch2在非终结符表中的位置
	if(gotoarr[ch1][j]==0){
		cout<<"\tError"<<endl;
	    count=s.size();
	}
	else{
		status.push(gotoarr[ch1][j]);//新状态进栈
	    Status[StatusNumber]=gotoarr[ch1][j];
        StatusNumber++;
	}
 }
void Reduction(int i,string s){//归约函数R
    Output(s);
	cout<<"r"<<i<<":"<<Production[i-1]<<"归约，GoTo(";
	int N=Production[i-1].length()-3;
	for(int j=0;j<N;j++){//消除要归约的状态及符号
		status.pop();
		Stack.pop();
		StatusNumber--;
		stacktd.erase(stacktd.length()-1);
	}
	cout<<status.top()<<","<<Production[i-1].at(0)<<")=";
    Stack.push(Production[i-1].at(0));//符号进栈
	stacktd=stacktd+Stack.top();
    Goto(status,Stack,s);
    cout<<status.top()<<"入栈"<<endl;
	Status[StatusNumber]=status.top();
}
void Analyse(string s){//具体分析函数
	Stack.push('#');//初始化
    status.push(0);
	s=s+"#";
	int t=-1;//记录ch在数组vt的位置
	while(count<s.size()){
		int i=status.top();
		char ch=s.at(count);
		Judge(t,6,vt,ch,s);
		if(flag==true){
			if(action[i][t]!="acc"&&action[i][t]!="0"){
				if(action[i][t].at(0)=='S'){
				 action[i][t].erase(0,1);	//删除action[i][t]的首字母S
				 Shift(atoi(action[i][t].c_str()),s);//atoi(action[i][t].c_str())，将action[i][t]转换为整型
				 action[i][t].insert(0,"S");//将S添加回action[i][t]
			 }
			 else if(action[i][t].at(0)=='r'){
				 action[i][t].erase(0,1);//删除action[i][t]的首字母r
				 Reduction(atoi(action[i][t].c_str()),s);//atoi(action[i][t].c_str())，将action[i][t]转换为整型
				 action[i][t].insert(0,"r");//将r添加回action[i][t]
			 }
		 }
		 else if(action[i][t]=="0"){
			cout<<"\tError"<<endl;
			break;
			}
		 else if(action[i][t]=="acc"){
			 Output(s);
			 cout<<"acc"<<"\t分析成功"<<endl;
			 break;
		 }
	 }
		else if(flag==false)
			break;
	}
}
int main(){
	string s;
	cout<<"************************LR(1)分析*************************"<<endl;
    cout<<"本分析文法产生式为"<<endl;
	for(int j=0;j<6;j++)
		cout<<Production[j]<<endl;
	cout<<"************************LR(1)分析*************************"<<endl;
	char T;
do{
	cout<<"输入字符串"<<endl;
	cin>>s;//输入要分析的字符串
	cout<<"************************现进行如下分析*************************"<<endl;
	cout<<"步骤"<<"\t"<<"状态栈"<<"\t"<<"符号栈"<<"\t"<<"剩余输入串"<<"\t"<<"动作说明"<<endl;
    Analyse(s);
	count=0;//记录当前进行处理的输入字符串字符位置
    line=1;//记录处理的步骤数
    stacktd="#";
	StatusNumber=1;
    while(!Stack.empty()){
	   Stack.pop();
	}
	while(!status.empty()){
	   status.pop();
	}
    cout<<"是否继续分析,Y或y继续"<<endl;
	cin>>T;
	}while(T=='y'||T=='Y');
 	return 0;

}
